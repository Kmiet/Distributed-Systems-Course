//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Bank = _ModuleRegistry.module("Bank");

    Bank.LoanRejectionError = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Bank::LoanRejectionError";
        }

        _mostDerivedType()
        {
            return Bank.LoanRejectionError;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    Bank.RegistrationError = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Bank::RegistrationError";
        }

        _mostDerivedType()
        {
            return Bank.RegistrationError;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    Bank.UnauthorizedError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Bank::UnauthorizedError";
        }

        _mostDerivedType()
        {
            return Bank.UnauthorizedError;
        }
    };

    Bank.UserAlreadyExistsError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Bank::UserAlreadyExistsError";
        }

        _mostDerivedType()
        {
            return Bank.UserAlreadyExistsError;
        }
    };

    Bank.AccountType = Slice.defineEnum([
        ['PREMIUM', 0], ['STANDARD', 1]]);

    Bank.Currency = Slice.defineEnum([
        ['AUD', 0], ['CHF', 1], ['EUR', 2], ['GBP', 3], ['USD', 4],
        ['PLN', 5]]);

    Bank.Date = class
    {
        constructor(year = 0, month = 0, day = 0)
        {
            this.year = year;
            this.month = month;
            this.day = day;
        }

        _write(ostr)
        {
            ostr.writeInt(this.year);
            ostr.writeByte(this.month);
            ostr.writeByte(this.day);
        }

        _read(istr)
        {
            this.year = istr.readInt();
            this.month = istr.readByte();
            this.day = istr.readByte();
        }

        static get minWireSize()
        {
            return  6;
        }
    };

    Slice.defineStruct(Bank.Date, true, false);

    Bank.Loan = class
    {
        constructor(currency = "", amountTaken = 0.0, amountReturned = 0.0, interestRate = 0.0, takenOn = new Bank.Date(), dueTo = new Bank.Date())
        {
            this.currency = currency;
            this.amountTaken = amountTaken;
            this.amountReturned = amountReturned;
            this.interestRate = interestRate;
            this.takenOn = takenOn;
            this.dueTo = dueTo;
        }

        _write(ostr)
        {
            ostr.writeString(this.currency);
            ostr.writeDouble(this.amountTaken);
            ostr.writeDouble(this.amountReturned);
            ostr.writeDouble(this.interestRate);
            Bank.Date.write(ostr, this.takenOn);
            Bank.Date.write(ostr, this.dueTo);
        }

        _read(istr)
        {
            this.currency = istr.readString();
            this.amountTaken = istr.readDouble();
            this.amountReturned = istr.readDouble();
            this.interestRate = istr.readDouble();
            this.takenOn = Bank.Date.read(istr, this.takenOn);
            this.dueTo = Bank.Date.read(istr, this.dueTo);
        }

        static get minWireSize()
        {
            return  37;
        }
    };

    Slice.defineStruct(Bank.Loan, false, true);

    Slice.defineSequence(Bank, "LoansHelper", "Bank.Loan", false);

    Bank.LoanAmount = class
    {
        constructor(plnAmount = 0.0, foreignCurrencyAmount = 0.0)
        {
            this.plnAmount = plnAmount;
            this.foreignCurrencyAmount = foreignCurrencyAmount;
        }

        _write(ostr)
        {
            ostr.writeDouble(this.plnAmount);
            ostr.writeDouble(this.foreignCurrencyAmount);
        }

        _read(istr)
        {
            this.plnAmount = istr.readDouble();
            this.foreignCurrencyAmount = istr.readDouble();
        }

        static get minWireSize()
        {
            return  16;
        }
    };

    Slice.defineStruct(Bank.LoanAmount, false, false);

    Bank.AccountState = class
    {
        constructor(value = 0.0, loans = null)
        {
            this.value = value;
            this.loans = loans;
        }

        _write(ostr)
        {
            ostr.writeDouble(this.value);
            Bank.LoansHelper.write(ostr, this.loans);
        }

        _read(istr)
        {
            this.value = istr.readDouble();
            this.loans = Bank.LoansHelper.read(istr);
        }

        static get minWireSize()
        {
            return  9;
        }
    };

    Slice.defineStruct(Bank.AccountState, false, true);

    Bank.UserCredentials = class
    {
        constructor(pesel = "", password = "")
        {
            this.pesel = pesel;
            this.password = password;
        }

        _write(ostr)
        {
            ostr.writeString(this.pesel);
            ostr.writeString(this.password);
        }

        _read(istr)
        {
            this.pesel = istr.readString();
            this.password = istr.readString();
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Bank.UserCredentials, true, true);

    Bank.UserAccount = class
    {
        constructor(credentials = new Bank.UserCredentials(), firstName = "", lastName = "", accountType = Bank.AccountType.PREMIUM)
        {
            this.credentials = credentials;
            this.firstName = firstName;
            this.lastName = lastName;
            this.accountType = accountType;
        }

        _write(ostr)
        {
            Bank.UserCredentials.write(ostr, this.credentials);
            ostr.writeString(this.firstName);
            ostr.writeString(this.lastName);
            Bank.AccountType._write(ostr, this.accountType);
        }

        _read(istr)
        {
            this.credentials = Bank.UserCredentials.read(istr, this.credentials);
            this.firstName = istr.readString();
            this.lastName = istr.readString();
            this.accountType = Bank.AccountType._read(istr);
        }

        static get minWireSize()
        {
            return  5;
        }
    };

    Slice.defineStruct(Bank.UserAccount, true, true);

    Bank.BankAccount = class
    {
        constructor(user = new Bank.UserAccount(), state = new Bank.AccountState())
        {
            this.user = user;
            this.state = state;
        }

        _write(ostr)
        {
            Bank.UserAccount.write(ostr, this.user);
            Bank.AccountState.write(ostr, this.state);
        }

        _read(istr)
        {
            this.user = Bank.UserAccount.read(istr, this.user);
            this.state = Bank.AccountState.read(istr, this.state);
        }

        static get minWireSize()
        {
            return  14;
        }
    };

    Slice.defineStruct(Bank.BankAccount, false, true);

    Bank.RegistrationResponse = class
    {
        constructor(password = "", accountType = Bank.AccountType.PREMIUM)
        {
            this.password = password;
            this.accountType = accountType;
        }

        _write(ostr)
        {
            ostr.writeString(this.password);
            Bank.AccountType._write(ostr, this.accountType);
        }

        _read(istr)
        {
            this.password = istr.readString();
            this.accountType = Bank.AccountType._read(istr);
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Bank.RegistrationResponse, true, true);

    const iceC_Bank_User_ids = [
        "::Bank::User",
        "::Ice::Object"
    ];

    Bank.User = class extends Ice.Object
    {
    };

    Bank.UserPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Bank.User, Bank.UserPrx, iceC_Bank_User_ids, 0,
    {
        "registerNewAccount": [, , , , [Bank.RegistrationResponse], [[7], [7], [7], [3]], ,
        [
            Bank.RegistrationError,
            Bank.UserAlreadyExistsError
        ], , ]
    });

    const iceC_Bank_Account_ids = [
        "::Bank::Account",
        "::Ice::Object"
    ];

    Bank.Account = class extends Ice.Object
    {
    };

    Bank.AccountPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Bank.Account, Bank.AccountPrx, iceC_Bank_Account_ids, 0,
    {
        "getCurrentState": [, , , , [Bank.AccountState], [[Bank.UserCredentials]], ,
        [
            Bank.UnauthorizedError
        ], , ],
        "takeALoan": [, , , , [Bank.LoanAmount], [[Bank.UserCredentials], [7], [6], [Bank.Date]], ,
        [
            Bank.LoanRejectionError,
            Bank.UnauthorizedError
        ], , ]
    });

    const iceC_Bank_Client_ids = [
        "::Bank::Account",
        "::Bank::Client",
        "::Bank::User",
        "::Ice::Object"
    ];

    Bank.Client = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Bank.Account,
                Bank.User
            ];
        }
    };

    Bank.ClientPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Bank.AccountPrx,
                Bank.UserPrx];
        }
    };

    Slice.defineOperations(Bank.Client, Bank.ClientPrx, iceC_Bank_Client_ids, 1);
    exports.Bank = Bank;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
