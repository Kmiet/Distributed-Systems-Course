//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Bank.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Bank = _ModuleRegistry.module("Bank");

    Bank.InvalidCredentials = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Bank::InvalidCredentials";
        }

        _mostDerivedType()
        {
            return Bank.InvalidCredentials;
        }
    };

    Bank.LoanRejectionError = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Bank::LoanRejectionError";
        }

        _mostDerivedType()
        {
            return Bank.LoanRejectionError;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    Bank.RegistrationError = class extends Ice.UserException
    {
        constructor(reason = "", _cause = "")
        {
            super(_cause);
            this.reason = reason;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Bank::RegistrationError";
        }

        _mostDerivedType()
        {
            return Bank.RegistrationError;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.reason);
        }

        _readMemberImpl(istr)
        {
            this.reason = istr.readString();
        }
    };

    Bank.UnauthorizedError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Bank::UnauthorizedError";
        }

        _mostDerivedType()
        {
            return Bank.UnauthorizedError;
        }
    };

    Bank.UserAlreadyExistsError = class extends Ice.UserException
    {
        constructor(_cause = "")
        {
            super(_cause);
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Bank::UserAlreadyExistsError";
        }

        _mostDerivedType()
        {
            return Bank.UserAlreadyExistsError;
        }
    };

    Bank.AccountType = Slice.defineEnum([
        ['PREMIUM', 0], ['STANDARD', 1]]);

    Bank.Currency = Slice.defineEnum([
        ['AUD', 0], ['CHF', 1], ['EUR', 2], ['GBP', 3], ['USD', 4],
        ['PLN', 5]]);

    Bank.LoanOffer = class
    {
        constructor(currency = "", amountInPLN = 0.0, amount = 0.0)
        {
            this.currency = currency;
            this.amountInPLN = amountInPLN;
            this.amount = amount;
        }

        _write(ostr)
        {
            ostr.writeString(this.currency);
            ostr.writeDouble(this.amountInPLN);
            ostr.writeDouble(this.amount);
        }

        _read(istr)
        {
            this.currency = istr.readString();
            this.amountInPLN = istr.readDouble();
            this.amount = istr.readDouble();
        }

        static get minWireSize()
        {
            return  17;
        }
    };

    Slice.defineStruct(Bank.LoanOffer, false, true);

    Bank.AccountInfo = class
    {
        constructor(firstName = "", lastName = "", amount = 0.0, type = Bank.AccountType.PREMIUM)
        {
            this.firstName = firstName;
            this.lastName = lastName;
            this.amount = amount;
            this.type = type;
        }

        _write(ostr)
        {
            ostr.writeString(this.firstName);
            ostr.writeString(this.lastName);
            ostr.writeDouble(this.amount);
            Bank.AccountType._write(ostr, this.type);
        }

        _read(istr)
        {
            this.firstName = istr.readString();
            this.lastName = istr.readString();
            this.amount = istr.readDouble();
            this.type = Bank.AccountType._read(istr);
        }

        static get minWireSize()
        {
            return  11;
        }
    };

    Slice.defineStruct(Bank.AccountInfo, false, true);

    Bank.UserCredentials = class
    {
        constructor(pesel = "", password = "")
        {
            this.pesel = pesel;
            this.password = password;
        }

        _write(ostr)
        {
            ostr.writeString(this.pesel);
            ostr.writeString(this.password);
        }

        _read(istr)
        {
            this.pesel = istr.readString();
            this.password = istr.readString();
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Bank.UserCredentials, true, true);

    const iceC_Bank_Account_ids = [
        "::Bank::Account",
        "::Ice::Object"
    ];

    Bank.Account = class extends Ice.Object
    {
    };

    Bank.AccountPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Bank.Account, Bank.AccountPrx, iceC_Bank_Account_ids, 0,
    {
        "getCurrentState": [, , , , [Bank.AccountInfo], [[Bank.UserCredentials]], ,
        [
            Bank.UnauthorizedError
        ], , ]
    });

    const iceC_Bank_PremiumAccount_ids = [
        "::Bank::Account",
        "::Bank::PremiumAccount",
        "::Ice::Object"
    ];

    Bank.PremiumAccount = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Bank.Account
            ];
        }
    };

    Bank.PremiumAccountPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Bank.AccountPrx];
        }
    };

    Slice.defineOperations(Bank.PremiumAccount, Bank.PremiumAccountPrx, iceC_Bank_PremiumAccount_ids, 1,
    {
        "takeALoan": [, , , , [Bank.LoanOffer], [[Bank.UserCredentials], [7], [6]], ,
        [
            Bank.LoanRejectionError,
            Bank.UnauthorizedError
        ], , ]
    });

    Bank.RegistrationResponse = class
    {
        constructor(password = "", accountType = Bank.AccountType.PREMIUM, account = null)
        {
            this.password = password;
            this.accountType = accountType;
            this.account = account;
        }

        _write(ostr)
        {
            ostr.writeString(this.password);
            Bank.AccountType._write(ostr, this.accountType);
            Bank.AccountPrx.write(ostr, this.account);
        }

        _read(istr)
        {
            this.password = istr.readString();
            this.accountType = Bank.AccountType._read(istr);
            this.account = Bank.AccountPrx.read(istr, this.account);
        }

        static get minWireSize()
        {
            return  4;
        }
    };

    Slice.defineStruct(Bank.RegistrationResponse, false, true);

    const iceC_Bank_User_ids = [
        "::Bank::User",
        "::Ice::Object"
    ];

    Bank.User = class extends Ice.Object
    {
    };

    Bank.UserPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Bank.User, Bank.UserPrx, iceC_Bank_User_ids, 0,
    {
        "registerNewAccount": [, , , , [Bank.RegistrationResponse], [[7], [7], [7], [3]], ,
        [
            Bank.RegistrationError,
            Bank.UserAlreadyExistsError
        ], , ],
        "login": [, , , , ["Bank.AccountPrx"], [[Bank.UserCredentials]], ,
        [
            Bank.UnauthorizedError
        ], , ]
    });
    exports.Bank = Bank;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
