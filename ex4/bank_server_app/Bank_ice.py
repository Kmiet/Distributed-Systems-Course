# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `Bank.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Bank
_M_Bank = Ice.openModule('Bank')
__name__ = 'Bank'

if 'LoanRejectionError' not in _M_Bank.__dict__:
    _M_Bank.LoanRejectionError = Ice.createTempClass()
    class LoanRejectionError(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::LoanRejectionError'

    _M_Bank._t_LoanRejectionError = IcePy.defineException('::Bank::LoanRejectionError', LoanRejectionError, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    LoanRejectionError._ice_type = _M_Bank._t_LoanRejectionError

    _M_Bank.LoanRejectionError = LoanRejectionError
    del LoanRejectionError

if 'RegistrationError' not in _M_Bank.__dict__:
    _M_Bank.RegistrationError = Ice.createTempClass()
    class RegistrationError(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::RegistrationError'

    _M_Bank._t_RegistrationError = IcePy.defineException('::Bank::RegistrationError', RegistrationError, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    RegistrationError._ice_type = _M_Bank._t_RegistrationError

    _M_Bank.RegistrationError = RegistrationError
    del RegistrationError

if 'UnauthorizedError' not in _M_Bank.__dict__:
    _M_Bank.UnauthorizedError = Ice.createTempClass()
    class UnauthorizedError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::UnauthorizedError'

    _M_Bank._t_UnauthorizedError = IcePy.defineException('::Bank::UnauthorizedError', UnauthorizedError, (), False, None, ())
    UnauthorizedError._ice_type = _M_Bank._t_UnauthorizedError

    _M_Bank.UnauthorizedError = UnauthorizedError
    del UnauthorizedError

if 'UserAlreadyExistsError' not in _M_Bank.__dict__:
    _M_Bank.UserAlreadyExistsError = Ice.createTempClass()
    class UserAlreadyExistsError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::UserAlreadyExistsError'

    _M_Bank._t_UserAlreadyExistsError = IcePy.defineException('::Bank::UserAlreadyExistsError', UserAlreadyExistsError, (), False, None, ())
    UserAlreadyExistsError._ice_type = _M_Bank._t_UserAlreadyExistsError

    _M_Bank.UserAlreadyExistsError = UserAlreadyExistsError
    del UserAlreadyExistsError

if 'AccountType' not in _M_Bank.__dict__:
    _M_Bank.AccountType = Ice.createTempClass()
    class AccountType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    AccountType.PREMIUM = AccountType("PREMIUM", 0)
    AccountType.STANDARD = AccountType("STANDARD", 1)
    AccountType._enumerators = { 0:AccountType.PREMIUM, 1:AccountType.STANDARD }

    _M_Bank._t_AccountType = IcePy.defineEnum('::Bank::AccountType', AccountType, (), AccountType._enumerators)

    _M_Bank.AccountType = AccountType
    del AccountType

if 'Currency' not in _M_Bank.__dict__:
    _M_Bank.Currency = Ice.createTempClass()
    class Currency(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Currency.AUD = Currency("AUD", 0)
    Currency.CHF = Currency("CHF", 1)
    Currency.EUR = Currency("EUR", 2)
    Currency.GBP = Currency("GBP", 3)
    Currency.USD = Currency("USD", 4)
    Currency.PLN = Currency("PLN", 5)
    Currency._enumerators = { 0:Currency.AUD, 1:Currency.CHF, 2:Currency.EUR, 3:Currency.GBP, 4:Currency.USD, 5:Currency.PLN }

    _M_Bank._t_Currency = IcePy.defineEnum('::Bank::Currency', Currency, (), Currency._enumerators)

    _M_Bank.Currency = Currency
    del Currency

if 'Date' not in _M_Bank.__dict__:
    _M_Bank.Date = Ice.createTempClass()
    class Date(object):
        def __init__(self, year=0, month=0, day=0):
            self.year = year
            self.month = month
            self.day = day

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.year)
            _h = 5 * _h + Ice.getHash(self.month)
            _h = 5 * _h + Ice.getHash(self.day)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.Date):
                return NotImplemented
            else:
                if self.year is None or other.year is None:
                    if self.year != other.year:
                        return (-1 if self.year is None else 1)
                else:
                    if self.year < other.year:
                        return -1
                    elif self.year > other.year:
                        return 1
                if self.month is None or other.month is None:
                    if self.month != other.month:
                        return (-1 if self.month is None else 1)
                else:
                    if self.month < other.month:
                        return -1
                    elif self.month > other.month:
                        return 1
                if self.day is None or other.day is None:
                    if self.day != other.day:
                        return (-1 if self.day is None else 1)
                else:
                    if self.day < other.day:
                        return -1
                    elif self.day > other.day:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_Date)

        __repr__ = __str__

    _M_Bank._t_Date = IcePy.defineStruct('::Bank::Date', Date, (), (
        ('year', (), IcePy._t_int),
        ('month', (), IcePy._t_byte),
        ('day', (), IcePy._t_byte)
    ))

    _M_Bank.Date = Date
    del Date

if 'Loan' not in _M_Bank.__dict__:
    _M_Bank.Loan = Ice.createTempClass()
    class Loan(object):
        def __init__(self, currency='', amountTaken=0.0, amountReturned=0.0, interestRate=0.0, takenOn=Ice._struct_marker, dueTo=Ice._struct_marker):
            self.currency = currency
            self.amountTaken = amountTaken
            self.amountReturned = amountReturned
            self.interestRate = interestRate
            if takenOn is Ice._struct_marker:
                self.takenOn = _M_Bank.Date()
            else:
                self.takenOn = takenOn
            if dueTo is Ice._struct_marker:
                self.dueTo = _M_Bank.Date()
            else:
                self.dueTo = dueTo

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Bank.Loan):
                return NotImplemented
            else:
                if self.currency != other.currency:
                    return False
                if self.amountTaken != other.amountTaken:
                    return False
                if self.amountReturned != other.amountReturned:
                    return False
                if self.interestRate != other.interestRate:
                    return False
                if self.takenOn != other.takenOn:
                    return False
                if self.dueTo != other.dueTo:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_Loan)

        __repr__ = __str__

    _M_Bank._t_Loan = IcePy.defineStruct('::Bank::Loan', Loan, (), (
        ('currency', (), IcePy._t_string),
        ('amountTaken', (), IcePy._t_double),
        ('amountReturned', (), IcePy._t_double),
        ('interestRate', (), IcePy._t_double),
        ('takenOn', (), _M_Bank._t_Date),
        ('dueTo', (), _M_Bank._t_Date)
    ))

    _M_Bank.Loan = Loan
    del Loan

if '_t_Loans' not in _M_Bank.__dict__:
    _M_Bank._t_Loans = IcePy.defineSequence('::Bank::Loans', (), _M_Bank._t_Loan)

if 'LoanAmount' not in _M_Bank.__dict__:
    _M_Bank.LoanAmount = Ice.createTempClass()
    class LoanAmount(object):
        def __init__(self, plnAmount=0.0, foreignCurrencyAmount=0.0):
            self.plnAmount = plnAmount
            self.foreignCurrencyAmount = foreignCurrencyAmount

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Bank.LoanAmount):
                return NotImplemented
            else:
                if self.plnAmount != other.plnAmount:
                    return False
                if self.foreignCurrencyAmount != other.foreignCurrencyAmount:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_LoanAmount)

        __repr__ = __str__

    _M_Bank._t_LoanAmount = IcePy.defineStruct('::Bank::LoanAmount', LoanAmount, (), (
        ('plnAmount', (), IcePy._t_double),
        ('foreignCurrencyAmount', (), IcePy._t_double)
    ))

    _M_Bank.LoanAmount = LoanAmount
    del LoanAmount

if 'AccountState' not in _M_Bank.__dict__:
    _M_Bank.AccountState = Ice.createTempClass()
    class AccountState(object):
        def __init__(self, value=0.0, loans=None):
            self.value = value
            self.loans = loans

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Bank.AccountState):
                return NotImplemented
            else:
                if self.value != other.value:
                    return False
                if self.loans != other.loans:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountState)

        __repr__ = __str__

    _M_Bank._t_AccountState = IcePy.defineStruct('::Bank::AccountState', AccountState, (), (
        ('value', (), IcePy._t_double),
        ('loans', (), _M_Bank._t_Loans)
    ))

    _M_Bank.AccountState = AccountState
    del AccountState

if 'UserCredentials' not in _M_Bank.__dict__:
    _M_Bank.UserCredentials = Ice.createTempClass()
    class UserCredentials(object):
        def __init__(self, pesel='', password=''):
            self.pesel = pesel
            self.password = password

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.pesel)
            _h = 5 * _h + Ice.getHash(self.password)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.UserCredentials):
                return NotImplemented
            else:
                if self.pesel is None or other.pesel is None:
                    if self.pesel != other.pesel:
                        return (-1 if self.pesel is None else 1)
                else:
                    if self.pesel < other.pesel:
                        return -1
                    elif self.pesel > other.pesel:
                        return 1
                if self.password is None or other.password is None:
                    if self.password != other.password:
                        return (-1 if self.password is None else 1)
                else:
                    if self.password < other.password:
                        return -1
                    elif self.password > other.password:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_UserCredentials)

        __repr__ = __str__

    _M_Bank._t_UserCredentials = IcePy.defineStruct('::Bank::UserCredentials', UserCredentials, (), (
        ('pesel', (), IcePy._t_string),
        ('password', (), IcePy._t_string)
    ))

    _M_Bank.UserCredentials = UserCredentials
    del UserCredentials

if 'UserAccount' not in _M_Bank.__dict__:
    _M_Bank.UserAccount = Ice.createTempClass()
    class UserAccount(object):
        def __init__(self, credentials=Ice._struct_marker, firstName='', lastName='', accountType=_M_Bank.AccountType.PREMIUM):
            if credentials is Ice._struct_marker:
                self.credentials = _M_Bank.UserCredentials()
            else:
                self.credentials = credentials
            self.firstName = firstName
            self.lastName = lastName
            self.accountType = accountType

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.credentials)
            _h = 5 * _h + Ice.getHash(self.firstName)
            _h = 5 * _h + Ice.getHash(self.lastName)
            _h = 5 * _h + Ice.getHash(self.accountType)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.UserAccount):
                return NotImplemented
            else:
                if self.credentials is None or other.credentials is None:
                    if self.credentials != other.credentials:
                        return (-1 if self.credentials is None else 1)
                else:
                    if self.credentials < other.credentials:
                        return -1
                    elif self.credentials > other.credentials:
                        return 1
                if self.firstName is None or other.firstName is None:
                    if self.firstName != other.firstName:
                        return (-1 if self.firstName is None else 1)
                else:
                    if self.firstName < other.firstName:
                        return -1
                    elif self.firstName > other.firstName:
                        return 1
                if self.lastName is None or other.lastName is None:
                    if self.lastName != other.lastName:
                        return (-1 if self.lastName is None else 1)
                else:
                    if self.lastName < other.lastName:
                        return -1
                    elif self.lastName > other.lastName:
                        return 1
                if self.accountType is None or other.accountType is None:
                    if self.accountType != other.accountType:
                        return (-1 if self.accountType is None else 1)
                else:
                    if self.accountType < other.accountType:
                        return -1
                    elif self.accountType > other.accountType:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_UserAccount)

        __repr__ = __str__

    _M_Bank._t_UserAccount = IcePy.defineStruct('::Bank::UserAccount', UserAccount, (), (
        ('credentials', (), _M_Bank._t_UserCredentials),
        ('firstName', (), IcePy._t_string),
        ('lastName', (), IcePy._t_string),
        ('accountType', (), _M_Bank._t_AccountType)
    ))

    _M_Bank.UserAccount = UserAccount
    del UserAccount

if 'BankAccount' not in _M_Bank.__dict__:
    _M_Bank.BankAccount = Ice.createTempClass()
    class BankAccount(object):
        def __init__(self, user=Ice._struct_marker, state=Ice._struct_marker):
            if user is Ice._struct_marker:
                self.user = _M_Bank.UserAccount()
            else:
                self.user = user
            if state is Ice._struct_marker:
                self.state = _M_Bank.AccountState()
            else:
                self.state = state

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Bank.BankAccount):
                return NotImplemented
            else:
                if self.user != other.user:
                    return False
                if self.state != other.state:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_BankAccount)

        __repr__ = __str__

    _M_Bank._t_BankAccount = IcePy.defineStruct('::Bank::BankAccount', BankAccount, (), (
        ('user', (), _M_Bank._t_UserAccount),
        ('state', (), _M_Bank._t_AccountState)
    ))

    _M_Bank.BankAccount = BankAccount
    del BankAccount

if 'RegistrationResponse' not in _M_Bank.__dict__:
    _M_Bank.RegistrationResponse = Ice.createTempClass()
    class RegistrationResponse(object):
        def __init__(self, password='', accountType=_M_Bank.AccountType.PREMIUM):
            self.password = password
            self.accountType = accountType

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.password)
            _h = 5 * _h + Ice.getHash(self.accountType)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.RegistrationResponse):
                return NotImplemented
            else:
                if self.password is None or other.password is None:
                    if self.password != other.password:
                        return (-1 if self.password is None else 1)
                else:
                    if self.password < other.password:
                        return -1
                    elif self.password > other.password:
                        return 1
                if self.accountType is None or other.accountType is None:
                    if self.accountType != other.accountType:
                        return (-1 if self.accountType is None else 1)
                else:
                    if self.accountType < other.accountType:
                        return -1
                    elif self.accountType > other.accountType:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_RegistrationResponse)

        __repr__ = __str__

    _M_Bank._t_RegistrationResponse = IcePy.defineStruct('::Bank::RegistrationResponse', RegistrationResponse, (), (
        ('password', (), IcePy._t_string),
        ('accountType', (), _M_Bank._t_AccountType)
    ))

    _M_Bank.RegistrationResponse = RegistrationResponse
    del RegistrationResponse

_M_Bank._t_User = IcePy.defineValue('::Bank::User', Ice.Value, -1, (), False, True, None, ())

if 'UserPrx' not in _M_Bank.__dict__:
    _M_Bank.UserPrx = Ice.createTempClass()
    class UserPrx(Ice.ObjectPrx):

        def registerNewAccount(self, firstName, lastName, pesel, monthlyDeposit, context=None):
            return _M_Bank.User._op_registerNewAccount.invoke(self, ((firstName, lastName, pesel, monthlyDeposit), context))

        def registerNewAccountAsync(self, firstName, lastName, pesel, monthlyDeposit, context=None):
            return _M_Bank.User._op_registerNewAccount.invokeAsync(self, ((firstName, lastName, pesel, monthlyDeposit), context))

        def begin_registerNewAccount(self, firstName, lastName, pesel, monthlyDeposit, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.User._op_registerNewAccount.begin(self, ((firstName, lastName, pesel, monthlyDeposit), _response, _ex, _sent, context))

        def end_registerNewAccount(self, _r):
            return _M_Bank.User._op_registerNewAccount.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.UserPrx.ice_checkedCast(proxy, '::Bank::User', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.UserPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::User'
    _M_Bank._t_UserPrx = IcePy.defineProxy('::Bank::User', UserPrx)

    _M_Bank.UserPrx = UserPrx
    del UserPrx

    _M_Bank.User = Ice.createTempClass()
    class User(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::User', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::User'

        @staticmethod
        def ice_staticId():
            return '::Bank::User'

        def registerNewAccount(self, firstName, lastName, pesel, monthlyDeposit, current=None):
            raise NotImplementedError("servant method 'registerNewAccount' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_UserDisp)

        __repr__ = __str__

    _M_Bank._t_UserDisp = IcePy.defineClass('::Bank::User', User, (), None, ())
    User._ice_type = _M_Bank._t_UserDisp

    User._op_registerNewAccount = IcePy.Operation('registerNewAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Bank._t_RegistrationResponse, False, 0), (_M_Bank._t_RegistrationError, _M_Bank._t_UserAlreadyExistsError))

    _M_Bank.User = User
    del User

_M_Bank._t_Account = IcePy.defineValue('::Bank::Account', Ice.Value, -1, (), False, True, None, ())

if 'AccountPrx' not in _M_Bank.__dict__:
    _M_Bank.AccountPrx = Ice.createTempClass()
    class AccountPrx(Ice.ObjectPrx):

        def getCurrentState(self, credentials, context=None):
            return _M_Bank.Account._op_getCurrentState.invoke(self, ((credentials, ), context))

        def getCurrentStateAsync(self, credentials, context=None):
            return _M_Bank.Account._op_getCurrentState.invokeAsync(self, ((credentials, ), context))

        def begin_getCurrentState(self, credentials, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_getCurrentState.begin(self, ((credentials, ), _response, _ex, _sent, context))

        def end_getCurrentState(self, _r):
            return _M_Bank.Account._op_getCurrentState.end(self, _r)

        def takeALoan(self, credentials, currency, amount, returnTime, context=None):
            return _M_Bank.Account._op_takeALoan.invoke(self, ((credentials, currency, amount, returnTime), context))

        def takeALoanAsync(self, credentials, currency, amount, returnTime, context=None):
            return _M_Bank.Account._op_takeALoan.invokeAsync(self, ((credentials, currency, amount, returnTime), context))

        def begin_takeALoan(self, credentials, currency, amount, returnTime, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_takeALoan.begin(self, ((credentials, currency, amount, returnTime), _response, _ex, _sent, context))

        def end_takeALoan(self, _r):
            return _M_Bank.Account._op_takeALoan.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.AccountPrx.ice_checkedCast(proxy, '::Bank::Account', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.AccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'
    _M_Bank._t_AccountPrx = IcePy.defineProxy('::Bank::Account', AccountPrx)

    _M_Bank.AccountPrx = AccountPrx
    del AccountPrx

    _M_Bank.Account = Ice.createTempClass()
    class Account(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::Account', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::Account'

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'

        def getCurrentState(self, credentials, current=None):
            raise NotImplementedError("servant method 'getCurrentState' not implemented")

        def takeALoan(self, credentials, currency, amount, returnTime, current=None):
            raise NotImplementedError("servant method 'takeALoan' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountDisp)

        __repr__ = __str__

    _M_Bank._t_AccountDisp = IcePy.defineClass('::Bank::Account', Account, (), None, ())
    Account._ice_type = _M_Bank._t_AccountDisp

    Account._op_getCurrentState = IcePy.Operation('getCurrentState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Bank._t_UserCredentials, False, 0),), (), ((), _M_Bank._t_AccountState, False, 0), (_M_Bank._t_UnauthorizedError,))
    Account._op_takeALoan = IcePy.Operation('takeALoan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Bank._t_UserCredentials, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_double, False, 0), ((), _M_Bank._t_Date, False, 0)), (), ((), _M_Bank._t_LoanAmount, False, 0), (_M_Bank._t_UnauthorizedError, _M_Bank._t_LoanRejectionError))

    _M_Bank.Account = Account
    del Account

_M_Bank._t_Client = IcePy.defineValue('::Bank::Client', Ice.Value, -1, (), False, True, None, ())

if 'ClientPrx' not in _M_Bank.__dict__:
    _M_Bank.ClientPrx = Ice.createTempClass()
    class ClientPrx(_M_Bank.AccountPrx, _M_Bank.UserPrx):

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.ClientPrx.ice_checkedCast(proxy, '::Bank::Client', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.ClientPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::Client'
    _M_Bank._t_ClientPrx = IcePy.defineProxy('::Bank::Client', ClientPrx)

    _M_Bank.ClientPrx = ClientPrx
    del ClientPrx

    _M_Bank.Client = Ice.createTempClass()
    class Client(_M_Bank.Account, _M_Bank.User):

        def ice_ids(self, current=None):
            return ('::Bank::Account', '::Bank::Client', '::Bank::User', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::Client'

        @staticmethod
        def ice_staticId():
            return '::Bank::Client'

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_ClientDisp)

        __repr__ = __str__

    _M_Bank._t_ClientDisp = IcePy.defineClass('::Bank::Client', Client, (), None, (_M_Bank._t_AccountDisp, _M_Bank._t_UserDisp))
    Client._ice_type = _M_Bank._t_ClientDisp

    _M_Bank.Client = Client
    del Client

# End of module Bank
